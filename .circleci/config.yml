version: 2
jobs:
  build:
    docker:
      - image: h3poteto/elixir-node:1.8.2-node10-slim-stretch
        environment:
          DB_HOST: 127.0.0.1
          # MySQLの起動チェック用
          HEALTH_CHECK_RETRY_LIMIT: 10
          HEALTH_CHECK_RETRY_WAIT: 3
      - image: mysql:5.7
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes

    working_directory: /var/opt/app
    steps:
      - checkout
      - run:
          name: Check elixir version
          command: elixir --version
      - run:
          name: Check node version
          command: node --version
      - restore_cache:
          name: Restoring cache - deps
          keys:
            - vendor-{{ checksum "mix.exs" }}-{{ checksum "mix.lock" }}
            - vendor-{{ checksum "mix.exs" }}-
      - restore_cache:
          name: Restoring cache - _build
          keys:
            - _build-{{ checksum "mix.exs" }}-{{ checksum "mix.lock" }}
            - _build-{{ checksum "mix.exs" }}
      - restore_cache:
          name: Restoring cache - node_modules
          keys:
            - node_modules-{{ checksum "assets/package-lock.json" }}
            - node_modules-
      - run:
          name: Mix packages install
          command: mix deps.get
      - save_cache:
          name: Saving cache - deps
          key: deps-{{ checksum "mix.exs" }}-{{ checksum "mix.lock" }}
          paths:
            - "deps"
      - run:
          name: Compile deps packages
          command: |
            mix local.hex --force
            mix local.rebar --force
            mix deps.compile
      - save_cache:
          name: Saving cache - _build
          key: _build-{{ checksum "mix.exs" }}-{{ checksum "mix.lock" }}
          paths:
            - "_build"
      - run:
          name: Node packages install
          command: |
            cd assets && npm install
      - save_cache:
          name: Saving cache - node_modules
          key: node_modules-{{ checksum "assets/package-lock.json" }}
          paths:
            - "assets/node_modules"
      - run:
          name: Checking mysql connection
          command: |
            for i in $(seq $HEALTH_CHECK_RETRY_LIMIT)
            do
              mysql -u root -h 127.0.0.1 -e 'show databases' || (sleep $HEALTH_CHECK_RETRY_WAIT; false) && break
            done
      - run:
          name: Migration database
          command: |
            mix ecto.create
            mix ecto.migrate
      - run:
          name: test
          command: mix test

  image:
    machine: true
    steps:
      - checkout
      - run:
          name: Check docker version
          command: docker version
      - run:
          name: Docker build
          command: |
            docker build -t $AWS_ECR_REPOSITORY:$CIRCLE_SHA1 .
            docker tag $AWS_ECR_REPOSITORY:$CIRCLE_SHA1 $AWS_ECR_REPOSITORY:latest
      - run:
          name: Docker push
          command: |
            $(aws ecr get-login --no-include-email --region ap-northeast-1)
            docker push $AWS_ECR_REPOSITORY:$CIRCLE_SHA1
            docker push $AWS_ECR_REPOSITORY:latest

  deploy:
    docker:
      - image: h3poteto/kubectl:latest
        environment:
          CLUSTER_NAME: external-prd.cluster.k8s.local
    working_directory: /var/opt/kube
    steps:
      - run:
          name: entrypoint
          command: |
            /var/opt/kube/entrypoint.sh
      - run:
          name: install kube-job
          command: |
            wget https://github.com/h3poteto/kube-job/releases/download/v0.2.2/kube-job_0.2.2_linux_amd64.zip
            unzip kube-job_0.2.2_linux_amd64.zip
            ./kube-job version
      - run:
          name: Clone k8s services
          command: |
            git clone https://github.com/h3poteto/k8s-services.git
      - run:
          name: Version
          command: |
            kubectl version
      - run:
          name: migration
          command: |
            ./kube-job run --config=$HOME/.kube/config --template-file=k8s-services/external-prd/seiyuwatch/job.yml --args="mix ecto.migrate" --container="phoenix"
      - run:
          name: deploy
          command: |
            kubectl patch -f k8s-services/external-prd/seiyuwatch/deployment.yml -p "{\"spec\":{\"template\":{\"spec\":{\"containers\":[{\"name\":\"phoenix\",\"image\":\"${AWS_ECR_REPOSITORY}:${CIRCLE_SHA1}\"}]}}}}"


workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build
      - image:
          filters:
            branches:
              only:
                - master
      - deploy:
          filters:
            branches:
              only:
                - master
          requires:
            - build
            - image

